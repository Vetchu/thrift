//
// Autogenerated by Thrift Compiler (0.14.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;
var Int64 = require('node-int64');


var idIOT_read_temperature = require('./idIOT_read_temperature');
var idIOT_read_temperatureClient = idIOT_read_temperature.Client;
var idIOT_read_temperatureProcessor = idIOT_read_temperature.Processor;
var ttypes = require('./tutorial_types');
//HELPER FUNCTIONS AND STRUCTURES

var idIOT_read_set_temperature_setTemperature_args = function(args) {
  this.id = null;
  this.ts = null;
  this.temp = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.ts !== undefined && args.ts !== null) {
      this.ts = args.ts;
    }
    if (args.temp !== undefined && args.temp !== null) {
      this.temp = args.temp;
    }
  }
};
idIOT_read_set_temperature_setTemperature_args.prototype = {};
idIOT_read_set_temperature_setTemperature_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.ts = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.temp = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

idIOT_read_set_temperature_setTemperature_args.prototype.write = function(output) {
  output.writeStructBegin('idIOT_read_set_temperature_setTemperature_args');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.ts !== null && this.ts !== undefined) {
    output.writeFieldBegin('ts', Thrift.Type.I32, 2);
    output.writeI32(this.ts);
    output.writeFieldEnd();
  }
  if (this.temp !== null && this.temp !== undefined) {
    output.writeFieldBegin('temp', Thrift.Type.I32, 3);
    output.writeI32(this.temp);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var idIOT_read_set_temperature_setTemperature_result = function(args) {
  this.success = null;
  this.deviceNotSupportedEx = null;
  if (args instanceof ttypes.Exception) {
    this.deviceNotSupportedEx = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.deviceNotSupportedEx !== undefined && args.deviceNotSupportedEx !== null) {
      this.deviceNotSupportedEx = args.deviceNotSupportedEx;
    }
  }
};
idIOT_read_set_temperature_setTemperature_result.prototype = {};
idIOT_read_set_temperature_setTemperature_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.deviceNotSupportedEx = new ttypes.Exception();
        this.deviceNotSupportedEx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

idIOT_read_set_temperature_setTemperature_result.prototype.write = function(output) {
  output.writeStructBegin('idIOT_read_set_temperature_setTemperature_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.deviceNotSupportedEx !== null && this.deviceNotSupportedEx !== undefined) {
    output.writeFieldBegin('deviceNotSupportedEx', Thrift.Type.STRUCT, 1);
    this.deviceNotSupportedEx.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var idIOT_read_set_temperatureClient = exports.Client = function(output, pClass) {
  this.output = output;
  this.pClass = pClass;
  this._seqid = 0;
  this._reqs = {};
};
Thrift.inherits(idIOT_read_set_temperatureClient, idIOT_read_temperatureClient);
idIOT_read_set_temperatureClient.prototype.seqid = function() { return this._seqid; };
idIOT_read_set_temperatureClient.prototype.new_seqid = function() { return this._seqid += 1; };

idIOT_read_set_temperatureClient.prototype.setTemperature = function(id, ts, temp, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_setTemperature(id, ts, temp);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_setTemperature(id, ts, temp);
  }
};

idIOT_read_set_temperatureClient.prototype.send_setTemperature = function(id, ts, temp) {
  var output = new this.pClass(this.output);
  var params = {
    id: id,
    ts: ts,
    temp: temp
  };
  var args = new idIOT_read_set_temperature_setTemperature_args(params);
  try {
    output.writeMessageBegin('setTemperature', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

idIOT_read_set_temperatureClient.prototype.recv_setTemperature = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new idIOT_read_set_temperature_setTemperature_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.deviceNotSupportedEx) {
    return callback(result.deviceNotSupportedEx);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('setTemperature failed: unknown result');
};
var idIOT_read_set_temperatureProcessor = exports.Processor = function(handler) {
  this._handler = handler;
};
Thrift.inherits(idIOT_read_set_temperatureProcessor, idIOT_read_temperatureProcessor);
idIOT_read_set_temperatureProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.EXCEPTION, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
};
idIOT_read_set_temperatureProcessor.prototype.process_setTemperature = function(seqid, input, output) {
  var args = new idIOT_read_set_temperature_setTemperature_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.setTemperature.length === 3) {
    Q.fcall(this._handler.setTemperature.bind(this._handler),
      args.id,
      args.ts,
      args.temp
    ).then(function(result) {
      var result_obj = new idIOT_read_set_temperature_setTemperature_result({success: result});
      output.writeMessageBegin("setTemperature", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.Exception) {
        result = new idIOT_read_set_temperature_setTemperature_result(err);
        output.writeMessageBegin("setTemperature", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("setTemperature", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.setTemperature(args.id, args.ts, args.temp, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.Exception) {
        result_obj = new idIOT_read_set_temperature_setTemperature_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("setTemperature", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("setTemperature", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
